package com.improving.extensions.oidc.impl

// Generated by Akka gRPC. DO NOT EDIT.

import com.improving.extensions.oidc.SessionStore
import com.improving.utils.AsyncContext

import akka.annotation.ApiMayChange
import akka.grpc.AkkaGrpcGenerated
import cats.effect.IO
import kalix.scalasdk.Kalix

import scala.concurrent.Future

@AkkaGrpcGenerated
trait ReplicatedSessionStore {

  def putSession(in: StoreSessionRequest): scala.concurrent.Future[com.google.protobuf.empty.Empty]

  def getSession(in: SessionKey): scala.concurrent.Future[com.improving.extensions.oidc.impl.GetSessionResponse]

}

@AkkaGrpcGenerated
object ReplicatedSessionStore extends akka.grpc.ServiceDescription {

  /** Create and a [[ReplicatedSessionStore]] [[SessionStore]] for [[IO cats effect]]. */
  def createForCatsEffect(
    kalix: Kalix
  )(serviceEndpoint: Option[String], port: Int)(implicit asyncContext: AsyncContext): SessionStore[IO] = {
    kalix.register(ReplicatedSessionStoreEntityProvider(new ReplicatedSessionStoreEntity(_)))
    ReplicatedSessionStoreImpl.catsEffect(serviceEndpoint, port)
  }

  /** Create and a [[ReplicatedSessionStore]] [[SessionStore]] for [[Future scala future]]. */
  def createForScalaFuture(
    kalix: Kalix
  )(serviceEndpoint: Option[String], port: Int)(implicit asyncContext: AsyncContext): SessionStore[Future] = {
    kalix.register(ReplicatedSessionStoreEntityProvider(new ReplicatedSessionStoreEntity(_)))
    ReplicatedSessionStoreImpl.scalaFuture(serviceEndpoint, port)
  }

  /* gRPC / Protobuf stuff */

  val name = "com.improving.extensions.oidc.impl.ReplicatedSessionStore"

  val descriptor: com.google.protobuf.Descriptors.FileDescriptor =
    com.improving.extensions.oidc.impl.ReplicatedSessionStoreProto.javaDescriptor;

  object Serializers {
    import akka.grpc.scaladsl.ScalapbProtobufSerializer

    val StoreSessionRequestSerializer = new ScalapbProtobufSerializer(
      com.improving.extensions.oidc.impl.StoreSessionRequest.messageCompanion
    )

    val SessionKeySerializer = new ScalapbProtobufSerializer(
      com.improving.extensions.oidc.impl.SessionKey.messageCompanion
    )

    val google_protobuf_EmptySerializer = new ScalapbProtobufSerializer(
      com.google.protobuf.empty.Empty.messageCompanion
    )

    val GetSessionResponseSerializer = new ScalapbProtobufSerializer(
      com.improving.extensions.oidc.impl.GetSessionResponse.messageCompanion
    )

  }

  @ApiMayChange
  @AkkaGrpcGenerated
  object MethodDescriptors {
    import akka.grpc.internal.Marshaller
    import io.grpc.MethodDescriptor
    import Serializers._

    val putSessionDescriptor: MethodDescriptor[StoreSessionRequest, com.google.protobuf.empty.Empty] =
      MethodDescriptor
        .newBuilder()
        .setType(MethodDescriptor.MethodType.UNARY)
        .setFullMethodName(
          MethodDescriptor
            .generateFullMethodName("com.improving.extensions.oidc.impl.ReplicatedSessionStore", "PutSession")
        )
        .setRequestMarshaller(new Marshaller(StoreSessionRequestSerializer))
        .setResponseMarshaller(new Marshaller(google_protobuf_EmptySerializer))
        .setSampledToLocalTracing(true)
        .build()

    val getSessionDescriptor: MethodDescriptor[SessionKey, GetSessionResponse] =
      MethodDescriptor
        .newBuilder()
        .setType(MethodDescriptor.MethodType.UNARY)
        .setFullMethodName(
          MethodDescriptor
            .generateFullMethodName("com.improving.extensions.oidc.impl.ReplicatedSessionStore", "GetSession")
        )
        .setRequestMarshaller(new Marshaller(SessionKeySerializer))
        .setResponseMarshaller(new Marshaller(GetSessionResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()

  }

}
