syntax = "proto3";

package com.example.gateway.entity;

import "com/example/common/timestamp.proto";
import "com/example/gateway/domain/user_domain.proto";
import "google/protobuf/empty.proto";
import "kalix/annotations.proto";
import "scalapb/scalapb.proto";
import "validate/validate.proto";

/* Entity Requests / Responses */

message GetUserRequest {
  // The unique user identifier (UUID)
  string user_id = 1 [(kalix.field).entity_key = true, (validate.rules).string.uuid = true];
}

message UpdateUserRolesRequest {
  // The unique user identifier (UUID)
  string user_id = 1 [(kalix.field).entity_key = true, (validate.rules).string.uuid = true];
  // The (new/updated) application roles for the user
  repeated string updated_user_roles = 2 [
    (scalapb.field).collection_type = "scala.collection.immutable.Set",
    (validate.rules).repeated.min_items = 1
  ];
}

message GetUserResponse {
  optional domain.UserInfo user_info = 1;
}

/* (Value) Entity (Kalix) Service */

service User {
  option (kalix.codegen) = {
    value_entity: {
      name: "com.example.gateway.entity.UserEntity"
      entity_type: "user"
      state: "com.example.gateway.domain.UserInfo"
    }
  };

  // Get an existing `User` if they exist
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {}

  // Create (or update/sync) a `User` from identity provider information
  rpc CreateOrUpdateUserInfo(domain.UserInfo) returns (google.protobuf.Empty) {}

  // Update the roles assigned to a `User`
  rpc UpdateUserRoles(UpdateUserRolesRequest) returns (domain.UserInfo) {}
}
