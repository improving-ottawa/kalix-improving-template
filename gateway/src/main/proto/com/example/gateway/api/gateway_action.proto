syntax = "proto3";

package com.example.gateway.api;

import "com/example/bounded-context/domain/service1_domain.proto";
import "com/example/bounded-context/domain/service2_domain.proto";
import "com/example/gateway/domain/gateway_commands.proto";
import "com/example/gateway/domain/gateway_responses.proto";
import "com/example/gateway/domain/user_domain.proto";
import "com/example/gateway/domain/login_token.proto";
import "com/example/gateway/messages/online_check_messages.proto";
import "com/example/service3/domain/service3_domain.proto";

import "google/api/annotations.proto";
import "google/api/httpbody.proto";
import "google/protobuf/empty.proto";
import "kalix/annotations.proto";

service Gateway {
    option (kalix.codegen) = {
        action: {
            name: "com.example.gateway.api.GatewayProxy"
        }
    };

    /**************************
     * Unauthenticated routes *
     ***************************/

    // Simple online check
    rpc OnlineCheck (google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            // The HTTP/JSON endpoint for this RPC
            get: "/online"
        };
    }

    // Health check: checks that all backend-service (and implicitly the gateway) are online and available.
    rpc HealthCheck (google.protobuf.Empty) returns (HealthCheckResponse) {
        option (google.api.http) = {
            // The HTTP/JSON endpoint for this RPC
            get: "/health-check"
        };
    }

    /***************
     * Login Route *
     ***************/
    rpc CompleteLogin(domain.CompleteLoginRequest) returns (domain.CompleteLoginResponse);

    /**********************
     * User Entity routes *
     **********************/

    rpc GetUser (domain.GetUserRequest) returns (domain.GetUserResponse) {
        option (google.api.http) = {
            get: "/user/{user_id}"
        };
    }

    // Update the roles assigned to a `User`
    rpc UpdateUserRoles(domain.UpdateUserRolesRequest) returns (domain.UserInfo);

    /*************************
     * JWT/Admin Info routes *
     *************************/

    // Validates the provided JWT token
    rpc ValidateJwt (domain.JwtValidationRequest) returns (domain.JwtValidationResponse) {
        option (kalix.method).jwt = {
            validate: BEARER_TOKEN
            bearer_token_issuer: "example.io"
        };
    }

    rpc DoNothingTwice (domain.DoNothingTwiceCommand) returns (domain.DoNothingTwiceResponse) {
        option (kalix.method).jwt = {
            validate: BEARER_TOKEN
            bearer_token_issuer: "example.io"
        };
    }

    // **************************
    // * Bounded Context Routes *
    // **************************

    rpc DoNothing1 (boundedContext.domain.DoNothingCommand1) returns (boundedContext.domain.DoNothingResponse1) {
        option (kalix.method).jwt = {
            validate: BEARER_TOKEN
            bearer_token_issuer: "example.io"
        };
    }

    rpc DoNothing2 (boundedContext.domain.DoNothingCommand2) returns (boundedContext.domain.DoNothingResponse2) {
        option (kalix.method).jwt = {
            validate: BEARER_TOKEN
            bearer_token_issuer: "example.io"
        };
    }

    rpc DoNothing3 (service3.domain.DoNothingCommand3) returns (service3.domain.DoNothingResponse3) {
        option (kalix.method).jwt = {
            validate: BEARER_TOKEN
            bearer_token_issuer: "example.io"
        };
    }
}
