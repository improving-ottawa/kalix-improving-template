syntax = "proto3";

package com.example.gateway.domain;

import "com/example/common/timestamp.proto";

import "kalix/annotations.proto";
import "validate/validate.proto";

//TODO: Enable when using user types
//enum LoginTokenUsage {
//    Admin = 0;
//}

// State for a Login Token value entity
message LoginTokenState {
    common.Timestamp expiration_timestamp = 1;
    string redirect_uri = 2;
    //LoginTokenUsage usage = 3;
    //string user_email = 4;
}

// Requests

message CreateLoginTokenRequest {
    string token = 1 [(kalix.field).entity_key = true, (validate.rules).string.min_len = 8];
    string redirect_uri = 2;
    //LoginTokenUsage usage = 3;
    //TODO: use if using email string user_email = 4 [(validate.rules).string.min_len = 4];
}

message ClaimTokenRequest {
    string token = 1 [(kalix.field).entity_key = true, (validate.rules).string.min_len = 8];
}

// Responses

message CreateLoginTokenResponse {
    string token = 1 [(validate.rules).string.min_len = 8];
}

message ClaimTokenResponse {
    // One of either success or failure
    oneof response {
        ClaimTokenSuccess success = 1;
        ClaimTokenFailure failure = 2;
    }
}

message ClaimTokenSuccess {
    //TODO: uncomment if using email
    // The email address of the authorized user
    string user_email = 1 [(validate.rules).string.min_len = 4];

    // The (issued by OTT) JWT, which should be used in the `Authorization: Bearer` HTTP header for API requests.
    // Note: The JWT will contain the following claims:
    //   - `iss` will be "off-the-top.io"
    //   - `company_id` will be "{company_id}"
    //   - `sub` will be "{user_email}"
    //   - `usage` will be "{LoginTokenUsage}"
    string bearer_token = 2 [(validate.rules).string.min_len = 1];

    // The token usage (either Admin or Donor)
    //LoginTokenUsage user_role = 3;

}

message ClaimTokenFailure {
    // The equivalent HTTP status code, as if this was a HTTP response.
    uint32 http_status_code = 1;

    // An error message indicating why the claim failed.
    string error_message = 2 [(validate.rules).string.min_len = 1];
}

message JwtValidationRequest {
    //string field_to_validate = 1 [(validate.rules).string.uuid = true];
}

message JwtValidationResponse {
    bool is_valid = 1;
}
