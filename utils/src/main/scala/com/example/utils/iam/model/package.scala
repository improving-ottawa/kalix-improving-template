package com.example.utils.iam

import io.circe._
import io.circe.syntax._

import com.example.utils.iam.model._

import java.util.UUID

package model {

  /**
    * Represents a security entity
    */
  trait IamEntity {

    /**
      * Unique identifier for this entity.
      */
    def id: UUID
  }

  /**
    * Represents something that can be stored in a JWT token.
    */
  sealed trait IamPayload extends IamEntity

  /**
    * Describes a security claim, generated by the authorization server.
    */
  trait IamClaim extends IamPayload with IamEntity {

    /**
      * Unique identifier for this token.
      */
    def id: UUID

    /**
      * The [[IamPrincipal]] principal that is the subject of this claim.
      */
    def principal: IamPrincipal
  }

  /**
    * A principal in computer security is an entity that can be authenticated by a computer system or network.
    * @see
    *   https://en.wikipedia.org/wiki/Principal_(computer_security)
    */
  trait IamPrincipal extends IamPayload with IamEntity {

    /**
      * The unique id of this principal.
      */
    def id: UUID

    /**
      * The username of this principal.
      */
    def name: String
  }

  /**
    * A principal defined solely by a unique identifier and account name.
    *
    * @param id
    *   The unique ID of this principal.
    * @param name
    *   The account name of this principal.
    */
  final case class PrincipalIdentifier(id: UUID, name: String) extends IamPrincipal

}

/**
  * A principal defined solely by a unique identifier and account name.
  *
  * @param id
  *   The unique ID of this principal.
  * @param name
  *   The account name of this principal.
  */
final case class PrincipalIdentifier(id: UUID, name: String) extends IamPrincipal

// JSON serialization support for `PrincipalIdentifier`
object PrincipalIdentifier {

  implicit final val toJson: Encoder[PrincipalIdentifier] = new Encoder[PrincipalIdentifier] {

    override def apply(amp: PrincipalIdentifier) = Json.obj(
      "id"   -> amp.id.asJson,
      "name" -> amp.name.asJson
    )

  }

  implicit final val fromJson: Decoder[PrincipalIdentifier] = new Decoder[PrincipalIdentifier] {

    override def apply(c: HCursor) =
      for {
        id   <- c.get[String]("id").map(UUID.fromString)
        name <- c.get[String]("name")
      } yield PrincipalIdentifier(id, name)

  }

}
