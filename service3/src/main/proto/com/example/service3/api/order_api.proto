syntax = "proto3";

package com.example.service3.api;

import "com/example/common/timestamp.proto";
import "com/example/common/domain/address.proto";
import "com/example/common/domain/line_item.proto";
import "com/example/service3/domain/order_domain.proto";

import "google/protobuf/empty.proto";
import "kalix/annotations.proto";
import "scalapb/scalapb.proto";
import "validate/validate.proto";

message OrderFromCart {
  // The user (identity by ID) who is placing the order
  string user_id = 1 [
    (validate.rules).string.uuid = true,
    (scalapb.field).no_default_value_in_constructor = true
  ];

  // The (shopping) cart which the order is from
  string cart_id = 2 [
    (validate.rules).string.uuid = true,
    (scalapb.field).no_default_value_in_constructor = true
  ];

  // The buyer's shipping address
  common.domain.Address shipping_address = 3 [
    (validate.rules).message.required = true,
    (scalapb.field).required = true,
    (scalapb.field).no_default_value_in_constructor = true
  ];

  // The payment information for this order
  domain.PaymentInfo payment_info = 4 [
    (validate.rules).message.required = true,
    (scalapb.field).required = true,
    (scalapb.field).no_default_value_in_constructor = true
  ];

}

// The confirmation of a new order placed
message OrderConfirmation {
  // The unique ID for this order (globally unique throughout time/space)
  string order_id = 1;

  // The user (identity by ID) who is placing the order
  string user_id = 2;

  // A human readable/understandable (unique-ish) order number for this order (8 digits)
  string order_number = 3 [(validate.rules).string.len = 8];
}

message OrderById {
  string order_id = 1 [(validate.rules).string.uuid = true];
}

message GetOrderByNumber {
  string order_number = 1 [(validate.rules).string.len = 8];
}

// The "Orders" service

service Orders {
  option (kalix.codegen) = {
    action: {
      name: "com.example.service3.api.OrdersService"
    }
  };

  rpc CreateOrderFromCart(OrderFromCart) returns (OrderConfirmation);

  rpc GetOrderById(OrderById) returns (domain.Order);
}
